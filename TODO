In rough priority order:

deserialization with typechecking

type-checking
  - informative errors on failure
  - support type-checking Hash-like objects via [] property access
  - catch and wrap exceptions while getting data to type-check
  - ability to truncate a type to a certain depth as a nicer more general way to do 'type-check this to depth x' rather than the more ad-hoc shallow_type_check stuff

refinements of String, Numeric etc
  - length limits
  - integer ranges
  - enums - sets of allowed values

allow tags to be registered in the registry, together with:
  - what kind of constructor type the tag is used with
  - what ruby class(es) correspond to it
  - possibly: a type representing the strictest structural type which may be applied to instances of this tag
    - together with 'version' types, structural supertypes of the main type for this tag corresponding to partial serialization versions of it
  - for deserialization: a block that can be used to construct one
  - maybe allow types other than Object to have a custom tag too?

stop String type-checking as Sequence via its Enumerable implementation (which isn't even a sequence of characters, rather lines)

compute canonicalised intersections
compute canonicalised unions, with untagged unions replaced by a least upper bound

better convenience methods for traversing the type graph and getting info about it

ensure annotations play nice with derived types
