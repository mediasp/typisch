In rough priority order:

Easy ways to make supertypes / subtypes from existing types
  - support for this in the class-based DSL - help registering a subtype of your superclass's type

type-directed serialization (big win)

non-stack-busting #inspect output for recursive types once canonicalised

deserialization with typechecking

type-checking
  - informative errors on failure
  - support type-checking Hash-like objects via [] property access
  - catch and wrap exceptions while getting data to type-check

conveniences for the common case of union(foo, null)

stop String type-checking as Sequence via its Enumerable implementation (which isn't even a sequence of characters, rather lines)

compute canonicalised intersections

an optional further lossy canonical form for unions where only structural features of all terms in the union are preserved

remove vestiges of 'tag' as a first-class concept, and make Object accept a ruby class/module directly not a string
